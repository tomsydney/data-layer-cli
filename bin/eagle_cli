#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'eagle_cli'
require 'pp'

program :version, EagleCli::VERSION
program :description, 'CLI for the eagle genomics APIs'

$profile = 'default'
$server = nil

global_option('-p', '--profile NAME', 'Name of profile to use for command') do |profile|
  $profile = profile
end

def handle_global_options(options)
  if $profile
    options.profile = $profile
  end
end

command :configure do |c|
  c.syntax  = 'eagle_cli configure [options]'
  c.summary = 'Configure an Eagle CLI connection profile'
  c.description = 'Configure an Eagle CLI connection. If this command is run with no profile option "default" profile is used'
  c.example 'default usage', 'eagle_cli configure'
  c.example 'custom profile usage', 'eagle_cli configure -p NAME'
  c.action do |args, options|
    handle_global_options(options)
    conf = Hash.new
    conf[:name]   = options.profile
    conf[:url]    = ask("Instance url: ")
    conf[:id]     = ask("Client id: ")
    conf[:secret] = ask("Client secret: ")
    EagleCli::Config.with(conf).save
  end
end

command :list do |c|
  c.syntax  = 'eagle_cli list [options]'
  c.summary = 'List all datapackages from EDL instance'
  c.example 'default usage', 'eagle_cli list'
  c.example 'custom profile usage', 'eagle_cli list -p NAME'
  c.action do |args, options|
    handle_global_options(options)
    config = EagleCli::Config.load(options.profile)
    client = EagleCli::Client.new(config)
    data_layer = EagleCli::Api::DataLayer.new(client)
    response = data_layer.list
    pp response.fetch("packages")
  end
end

command :download do |c|
  c.syntax  = 'eagle_cli download DATAPACKAGE_URL [options]'
  c.summary = 'Download a datapackage from an instance'
  c.example 'default usage', 'eagle_cli download DATAPACKAGE_URL SAVE_DIR'
  c.example 'custom profile usage', 'eagle_cli download DATAPACKAGE_URL SAVE_DIR -p NAME'
  c.action do |args, options|
    handle_global_options(options)
    config = EagleCli::Config.load(options.profile)
    client = EagleCli::Client.new(config)
    data_layer = EagleCli::Api::DataLayer.new(client)
    save_dir = args[1].nil? ? './' : args[1]
    if File.directory?(save_dir)
      response = data_layer.download(args[0])
      filename = URI.parse(args[0]).path.split('/').last
      filepath = File.join(save_dir, "#{filename}.zip")
      File.write(filepath, response.to_s)
      puts "Done. Package saved to #{filepath}"
    else
      puts "ERROR: save directory could not be found"
    end
  end
end

command :upload do |c|
  c.syntax  = 'eagle_cli upload DATAPACKAGE [options]'
  c.summary = 'Upload a datapackage to an instance'
  c.example 'default usage', 'eagle_cli upload DATAPACKAGE'
  c.example 'custom profile usage', 'eagle_cli upload DATAPACKAGE -p NAME'
  c.action do |args, options|
    handle_global_options(options)
    config = EagleCli::Config.load(options.profile)
    client = EagleCli::Client.new(config)
    data_layer = EagleCli::Api::DataLayer.new(client)
    if File.exist?(args[0])
      response = data_layer.upload(args[0],File.extname(args[0]))
      package_uri = JSON.parse(response.body).fetch("resource")
      puts "Done. Package uploaded to #{package_uri}"
    else
      puts "ERROR: datapackage could not be found"
    end
  end
end

